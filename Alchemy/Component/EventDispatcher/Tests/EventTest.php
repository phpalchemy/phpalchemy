<?php
//require_once 'Event.php';
use Alchemy\Component\EventDispatcher\Event;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-05-24 at 23:48:30.
 */
class EventTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Event
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->event = new Event;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Event::getName
     */
    public function testGetName()
    {
        $this->event->setName('system.event1');
        $this->assertEquals('system.event1', $this->event->getName());

        $this->event->setName('system.event2');
        $this->assertEquals('system.event2', $this->event->getName());
    }

    /**
     * @covers Event::setProcessed
     */
    public function testSetProcessed()
    {
        $this->event->setName('system.event1');

        $this->event->setProcessed(true);
        $this->assertTrue($this->event->isProcessed());

        $this->event->setProcessed(false);
        $this->assertFalse($this->event->isProcessed());
    }

    /**
     * @covers Event::isProcessed
     */
    public function testIsProcessed()
    {
        $this->assertFalse($this->event->isProcessed());

        $this->event->setProcessed(true);
        $this->assertTrue($this->event->isProcessed());

        $this->event->setProcessed(false);
        $this->assertFalse($this->event->isProcessed());
    }

    /**
     * @covers Event::getParameters
     */
    public function testSetParameters()
    {
        $params = array(
            'one'   => 1,
            'two'   => 2,
            'three' => 3,
            'four'  => 4
        );

        $this->event->setParameters($params);
        $this->assertCount(4, $this->event->getParameters());

        return $params;
    }

    /**
     * @depends testSetParameters
     */
    public function testGetParameters(array $params)
    {
        $this->assertEmpty($this->event->getParameters());

        $this->event->setParameters($params);
        $this->assertEquals($params, $this->event->getParameters());

        $this->event->setParameters($params);
        $this->assertEquals($params, $this->event->getParameters());
    }
}

